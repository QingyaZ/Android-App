// Generated by view binder compiler. Do not edit!
package com.xsens.dot.android.example.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.xsens.dot.android.example.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemDataBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView freeAccData;

  @NonNull
  public final TextView freeAccLabel;

  @NonNull
  public final TextView orientationData;

  @NonNull
  public final TextView orientationLabel;

  @NonNull
  public final TextView sensorName;

  @NonNull
  public final TextView sensorNameLabel;

  @NonNull
  public final View view;

  private ItemDataBinding(@NonNull ConstraintLayout rootView, @NonNull TextView freeAccData,
      @NonNull TextView freeAccLabel, @NonNull TextView orientationData,
      @NonNull TextView orientationLabel, @NonNull TextView sensorName,
      @NonNull TextView sensorNameLabel, @NonNull View view) {
    this.rootView = rootView;
    this.freeAccData = freeAccData;
    this.freeAccLabel = freeAccLabel;
    this.orientationData = orientationData;
    this.orientationLabel = orientationLabel;
    this.sensorName = sensorName;
    this.sensorNameLabel = sensorNameLabel;
    this.view = view;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemDataBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_data, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemDataBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.free_acc_data;
      TextView freeAccData = rootView.findViewById(id);
      if (freeAccData == null) {
        break missingId;
      }

      id = R.id.free_acc_label;
      TextView freeAccLabel = rootView.findViewById(id);
      if (freeAccLabel == null) {
        break missingId;
      }

      id = R.id.orientation_data;
      TextView orientationData = rootView.findViewById(id);
      if (orientationData == null) {
        break missingId;
      }

      id = R.id.orientation_label;
      TextView orientationLabel = rootView.findViewById(id);
      if (orientationLabel == null) {
        break missingId;
      }

      id = R.id.sensor_name;
      TextView sensorName = rootView.findViewById(id);
      if (sensorName == null) {
        break missingId;
      }

      id = R.id.sensor_name_label;
      TextView sensorNameLabel = rootView.findViewById(id);
      if (sensorNameLabel == null) {
        break missingId;
      }

      id = R.id.view;
      View view = rootView.findViewById(id);
      if (view == null) {
        break missingId;
      }

      return new ItemDataBinding((ConstraintLayout) rootView, freeAccData, freeAccLabel,
          orientationData, orientationLabel, sensorName, sensorNameLabel, view);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
