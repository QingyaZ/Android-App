// Generated by view binder compiler. Do not edit!
package com.xsens.dot.android.example.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.xsens.dot.android.example.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDataBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final RecyclerView dataRecyclerView;

  @NonNull
  public final TextView mode;

  @NonNull
  public final TextView modeLabel;

  @NonNull
  public final TextView syncLabel;

  @NonNull
  public final TextView syncResult;

  private FragmentDataBinding(@NonNull ConstraintLayout rootView,
      @NonNull RecyclerView dataRecyclerView, @NonNull TextView mode, @NonNull TextView modeLabel,
      @NonNull TextView syncLabel, @NonNull TextView syncResult) {
    this.rootView = rootView;
    this.dataRecyclerView = dataRecyclerView;
    this.mode = mode;
    this.modeLabel = modeLabel;
    this.syncLabel = syncLabel;
    this.syncResult = syncResult;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDataBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_data, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDataBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.data_recycler_view;
      RecyclerView dataRecyclerView = rootView.findViewById(id);
      if (dataRecyclerView == null) {
        break missingId;
      }

      id = R.id.mode;
      TextView mode = rootView.findViewById(id);
      if (mode == null) {
        break missingId;
      }

      id = R.id.mode_label;
      TextView modeLabel = rootView.findViewById(id);
      if (modeLabel == null) {
        break missingId;
      }

      id = R.id.sync_label;
      TextView syncLabel = rootView.findViewById(id);
      if (syncLabel == null) {
        break missingId;
      }

      id = R.id.sync_result;
      TextView syncResult = rootView.findViewById(id);
      if (syncResult == null) {
        break missingId;
      }

      return new FragmentDataBinding((ConstraintLayout) rootView, dataRecyclerView, mode, modeLabel,
          syncLabel, syncResult);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
